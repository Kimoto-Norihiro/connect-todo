// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mock_repositories is a generated GoMock package.
package mock_repositories

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	v1 "github.com/Kimoto-Norihiro/connect-todo/server/api/todoservice/v1"
	gomock "github.com/golang/mock/gomock"
)

// MockITODORepository is a mock of ITODORepository interface.
type MockITODORepository struct {
	ctrl     *gomock.Controller
	recorder *MockITODORepositoryMockRecorder
}

// MockITODORepositoryMockRecorder is the mock recorder for MockITODORepository.
type MockITODORepositoryMockRecorder struct {
	mock *MockITODORepository
}

// NewMockITODORepository creates a new mock instance.
func NewMockITODORepository(ctrl *gomock.Controller) *MockITODORepository {
	mock := &MockITODORepository{ctrl: ctrl}
	mock.recorder = &MockITODORepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockITODORepository) EXPECT() *MockITODORepositoryMockRecorder {
	return m.recorder
}

// CreateTODO mocks base method.
func (m *MockITODORepository) CreateTODO(ctx context.Context, tx *sql.Tx, title string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTODO", ctx, tx, title)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateTODO indicates an expected call of CreateTODO.
func (mr *MockITODORepositoryMockRecorder) CreateTODO(ctx, tx, title interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTODO", reflect.TypeOf((*MockITODORepository)(nil).CreateTODO), ctx, tx, title)
}

// DeleteTODO mocks base method.
func (m *MockITODORepository) DeleteTODO(ctx context.Context, db *sql.DB, id int32) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTODO", ctx, db, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTODO indicates an expected call of DeleteTODO.
func (mr *MockITODORepositoryMockRecorder) DeleteTODO(ctx, db, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTODO", reflect.TypeOf((*MockITODORepository)(nil).DeleteTODO), ctx, db, id)
}

// ListTODOs mocks base method.
func (m *MockITODORepository) ListTODOs(ctx context.Context, db *sql.DB) ([]*v1.TODO, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTODOs", ctx, db)
	ret0, _ := ret[0].([]*v1.TODO)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTODOs indicates an expected call of ListTODOs.
func (mr *MockITODORepositoryMockRecorder) ListTODOs(ctx, db interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTODOs", reflect.TypeOf((*MockITODORepository)(nil).ListTODOs), ctx, db)
}

// UpdateTODO mocks base method.
func (m *MockITODORepository) UpdateTODO(ctx context.Context, tx *sql.Tx, todo *v1.TODO) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTODO", ctx, tx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTODO indicates an expected call of UpdateTODO.
func (mr *MockITODORepositoryMockRecorder) UpdateTODO(ctx, tx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTODO", reflect.TypeOf((*MockITODORepository)(nil).UpdateTODO), ctx, tx, todo)
}
