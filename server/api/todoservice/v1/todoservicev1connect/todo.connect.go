// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: todoservice/v1/todo.proto

package todoservicev1connect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	v1 "github.com/Kimoto-Norihiro/connect-todo/server/api/todoservice/v1"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion0_1_0

const (
	// TODOServiceName is the fully-qualified name of the TODOService service.
	TODOServiceName = "todoservice.v1.TODOService"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// TODOServiceCreateTODOProcedure is the fully-qualified name of the TODOService's CreateTODO RPC.
	TODOServiceCreateTODOProcedure = "/todoservice.v1.TODOService/CreateTODO"
	// TODOServiceListTODOsProcedure is the fully-qualified name of the TODOService's ListTODOs RPC.
	TODOServiceListTODOsProcedure = "/todoservice.v1.TODOService/ListTODOs"
	// TODOServiceUpdateTODOProcedure is the fully-qualified name of the TODOService's UpdateTODO RPC.
	TODOServiceUpdateTODOProcedure = "/todoservice.v1.TODOService/UpdateTODO"
	// TODOServiceDeleteTODOProcedure is the fully-qualified name of the TODOService's DeleteTODO RPC.
	TODOServiceDeleteTODOProcedure = "/todoservice.v1.TODOService/DeleteTODO"
)

// TODOServiceClient is a client for the todoservice.v1.TODOService service.
type TODOServiceClient interface {
	CreateTODO(context.Context, *connect.Request[v1.CreateTODORequest]) (*connect.Response[v1.CreateTODOResponse], error)
	ListTODOs(context.Context, *connect.Request[v1.ListTODOsRequest]) (*connect.Response[v1.ListTODOsResponse], error)
	UpdateTODO(context.Context, *connect.Request[v1.UpdateTODORequest]) (*connect.Response[v1.UpdateTODOResponse], error)
	DeleteTODO(context.Context, *connect.Request[v1.DeleteTODORequest]) (*connect.Response[v1.DeleteTODOResponse], error)
}

// NewTODOServiceClient constructs a client for the todoservice.v1.TODOService service. By default,
// it uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and
// sends uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC()
// or connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewTODOServiceClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) TODOServiceClient {
	baseURL = strings.TrimRight(baseURL, "/")
	return &tODOServiceClient{
		createTODO: connect.NewClient[v1.CreateTODORequest, v1.CreateTODOResponse](
			httpClient,
			baseURL+TODOServiceCreateTODOProcedure,
			opts...,
		),
		listTODOs: connect.NewClient[v1.ListTODOsRequest, v1.ListTODOsResponse](
			httpClient,
			baseURL+TODOServiceListTODOsProcedure,
			opts...,
		),
		updateTODO: connect.NewClient[v1.UpdateTODORequest, v1.UpdateTODOResponse](
			httpClient,
			baseURL+TODOServiceUpdateTODOProcedure,
			opts...,
		),
		deleteTODO: connect.NewClient[v1.DeleteTODORequest, v1.DeleteTODOResponse](
			httpClient,
			baseURL+TODOServiceDeleteTODOProcedure,
			opts...,
		),
	}
}

// tODOServiceClient implements TODOServiceClient.
type tODOServiceClient struct {
	createTODO *connect.Client[v1.CreateTODORequest, v1.CreateTODOResponse]
	listTODOs  *connect.Client[v1.ListTODOsRequest, v1.ListTODOsResponse]
	updateTODO *connect.Client[v1.UpdateTODORequest, v1.UpdateTODOResponse]
	deleteTODO *connect.Client[v1.DeleteTODORequest, v1.DeleteTODOResponse]
}

// CreateTODO calls todoservice.v1.TODOService.CreateTODO.
func (c *tODOServiceClient) CreateTODO(ctx context.Context, req *connect.Request[v1.CreateTODORequest]) (*connect.Response[v1.CreateTODOResponse], error) {
	return c.createTODO.CallUnary(ctx, req)
}

// ListTODOs calls todoservice.v1.TODOService.ListTODOs.
func (c *tODOServiceClient) ListTODOs(ctx context.Context, req *connect.Request[v1.ListTODOsRequest]) (*connect.Response[v1.ListTODOsResponse], error) {
	return c.listTODOs.CallUnary(ctx, req)
}

// UpdateTODO calls todoservice.v1.TODOService.UpdateTODO.
func (c *tODOServiceClient) UpdateTODO(ctx context.Context, req *connect.Request[v1.UpdateTODORequest]) (*connect.Response[v1.UpdateTODOResponse], error) {
	return c.updateTODO.CallUnary(ctx, req)
}

// DeleteTODO calls todoservice.v1.TODOService.DeleteTODO.
func (c *tODOServiceClient) DeleteTODO(ctx context.Context, req *connect.Request[v1.DeleteTODORequest]) (*connect.Response[v1.DeleteTODOResponse], error) {
	return c.deleteTODO.CallUnary(ctx, req)
}

// TODOServiceHandler is an implementation of the todoservice.v1.TODOService service.
type TODOServiceHandler interface {
	CreateTODO(context.Context, *connect.Request[v1.CreateTODORequest]) (*connect.Response[v1.CreateTODOResponse], error)
	ListTODOs(context.Context, *connect.Request[v1.ListTODOsRequest]) (*connect.Response[v1.ListTODOsResponse], error)
	UpdateTODO(context.Context, *connect.Request[v1.UpdateTODORequest]) (*connect.Response[v1.UpdateTODOResponse], error)
	DeleteTODO(context.Context, *connect.Request[v1.DeleteTODORequest]) (*connect.Response[v1.DeleteTODOResponse], error)
}

// NewTODOServiceHandler builds an HTTP handler from the service implementation. It returns the path
// on which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewTODOServiceHandler(svc TODOServiceHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	tODOServiceCreateTODOHandler := connect.NewUnaryHandler(
		TODOServiceCreateTODOProcedure,
		svc.CreateTODO,
		opts...,
	)
	tODOServiceListTODOsHandler := connect.NewUnaryHandler(
		TODOServiceListTODOsProcedure,
		svc.ListTODOs,
		opts...,
	)
	tODOServiceUpdateTODOHandler := connect.NewUnaryHandler(
		TODOServiceUpdateTODOProcedure,
		svc.UpdateTODO,
		opts...,
	)
	tODOServiceDeleteTODOHandler := connect.NewUnaryHandler(
		TODOServiceDeleteTODOProcedure,
		svc.DeleteTODO,
		opts...,
	)
	return "/todoservice.v1.TODOService/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case TODOServiceCreateTODOProcedure:
			tODOServiceCreateTODOHandler.ServeHTTP(w, r)
		case TODOServiceListTODOsProcedure:
			tODOServiceListTODOsHandler.ServeHTTP(w, r)
		case TODOServiceUpdateTODOProcedure:
			tODOServiceUpdateTODOHandler.ServeHTTP(w, r)
		case TODOServiceDeleteTODOProcedure:
			tODOServiceDeleteTODOHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedTODOServiceHandler returns CodeUnimplemented from all methods.
type UnimplementedTODOServiceHandler struct{}

func (UnimplementedTODOServiceHandler) CreateTODO(context.Context, *connect.Request[v1.CreateTODORequest]) (*connect.Response[v1.CreateTODOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoservice.v1.TODOService.CreateTODO is not implemented"))
}

func (UnimplementedTODOServiceHandler) ListTODOs(context.Context, *connect.Request[v1.ListTODOsRequest]) (*connect.Response[v1.ListTODOsResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoservice.v1.TODOService.ListTODOs is not implemented"))
}

func (UnimplementedTODOServiceHandler) UpdateTODO(context.Context, *connect.Request[v1.UpdateTODORequest]) (*connect.Response[v1.UpdateTODOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoservice.v1.TODOService.UpdateTODO is not implemented"))
}

func (UnimplementedTODOServiceHandler) DeleteTODO(context.Context, *connect.Request[v1.DeleteTODORequest]) (*connect.Response[v1.DeleteTODOResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("todoservice.v1.TODOService.DeleteTODO is not implemented"))
}
