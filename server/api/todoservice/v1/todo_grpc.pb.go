// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: todoservice/v1/todo.proto

package todoservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TODOServiceClient is the client API for TODOService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TODOServiceClient interface {
	CreateTODO(ctx context.Context, in *CreateTODORequest, opts ...grpc.CallOption) (*CreateTODOResponse, error)
	ListTODOs(ctx context.Context, in *ListTODOsRequest, opts ...grpc.CallOption) (*ListTODOsResponse, error)
	UpdateTODO(ctx context.Context, in *UpdateTODORequest, opts ...grpc.CallOption) (*UpdateTODOResponse, error)
	DeleteTODO(ctx context.Context, in *DeleteTODORequest, opts ...grpc.CallOption) (*DeleteTODOResponse, error)
}

type tODOServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTODOServiceClient(cc grpc.ClientConnInterface) TODOServiceClient {
	return &tODOServiceClient{cc}
}

func (c *tODOServiceClient) CreateTODO(ctx context.Context, in *CreateTODORequest, opts ...grpc.CallOption) (*CreateTODOResponse, error) {
	out := new(CreateTODOResponse)
	err := c.cc.Invoke(ctx, "/todoservice.v1.TODOService/CreateTODO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tODOServiceClient) ListTODOs(ctx context.Context, in *ListTODOsRequest, opts ...grpc.CallOption) (*ListTODOsResponse, error) {
	out := new(ListTODOsResponse)
	err := c.cc.Invoke(ctx, "/todoservice.v1.TODOService/ListTODOs", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tODOServiceClient) UpdateTODO(ctx context.Context, in *UpdateTODORequest, opts ...grpc.CallOption) (*UpdateTODOResponse, error) {
	out := new(UpdateTODOResponse)
	err := c.cc.Invoke(ctx, "/todoservice.v1.TODOService/UpdateTODO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tODOServiceClient) DeleteTODO(ctx context.Context, in *DeleteTODORequest, opts ...grpc.CallOption) (*DeleteTODOResponse, error) {
	out := new(DeleteTODOResponse)
	err := c.cc.Invoke(ctx, "/todoservice.v1.TODOService/DeleteTODO", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TODOServiceServer is the server API for TODOService service.
// All implementations must embed UnimplementedTODOServiceServer
// for forward compatibility
type TODOServiceServer interface {
	CreateTODO(context.Context, *CreateTODORequest) (*CreateTODOResponse, error)
	ListTODOs(context.Context, *ListTODOsRequest) (*ListTODOsResponse, error)
	UpdateTODO(context.Context, *UpdateTODORequest) (*UpdateTODOResponse, error)
	DeleteTODO(context.Context, *DeleteTODORequest) (*DeleteTODOResponse, error)
	mustEmbedUnimplementedTODOServiceServer()
}

// UnimplementedTODOServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTODOServiceServer struct {
}

func (UnimplementedTODOServiceServer) CreateTODO(context.Context, *CreateTODORequest) (*CreateTODOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTODO not implemented")
}
func (UnimplementedTODOServiceServer) ListTODOs(context.Context, *ListTODOsRequest) (*ListTODOsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListTODOs not implemented")
}
func (UnimplementedTODOServiceServer) UpdateTODO(context.Context, *UpdateTODORequest) (*UpdateTODOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTODO not implemented")
}
func (UnimplementedTODOServiceServer) DeleteTODO(context.Context, *DeleteTODORequest) (*DeleteTODOResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTODO not implemented")
}
func (UnimplementedTODOServiceServer) mustEmbedUnimplementedTODOServiceServer() {}

// UnsafeTODOServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TODOServiceServer will
// result in compilation errors.
type UnsafeTODOServiceServer interface {
	mustEmbedUnimplementedTODOServiceServer()
}

func RegisterTODOServiceServer(s grpc.ServiceRegistrar, srv TODOServiceServer) {
	s.RegisterService(&TODOService_ServiceDesc, srv)
}

func _TODOService_CreateTODO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTODORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).CreateTODO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.v1.TODOService/CreateTODO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).CreateTODO(ctx, req.(*CreateTODORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TODOService_ListTODOs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListTODOsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).ListTODOs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.v1.TODOService/ListTODOs",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).ListTODOs(ctx, req.(*ListTODOsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TODOService_UpdateTODO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTODORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).UpdateTODO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.v1.TODOService/UpdateTODO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).UpdateTODO(ctx, req.(*UpdateTODORequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TODOService_DeleteTODO_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTODORequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TODOServiceServer).DeleteTODO(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/todoservice.v1.TODOService/DeleteTODO",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TODOServiceServer).DeleteTODO(ctx, req.(*DeleteTODORequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TODOService_ServiceDesc is the grpc.ServiceDesc for TODOService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TODOService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "todoservice.v1.TODOService",
	HandlerType: (*TODOServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTODO",
			Handler:    _TODOService_CreateTODO_Handler,
		},
		{
			MethodName: "ListTODOs",
			Handler:    _TODOService_ListTODOs_Handler,
		},
		{
			MethodName: "UpdateTODO",
			Handler:    _TODOService_UpdateTODO_Handler,
		},
		{
			MethodName: "DeleteTODO",
			Handler:    _TODOService_DeleteTODO_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todoservice/v1/todo.proto",
}
