// @generated by protoc-gen-es v1.4.2 with parameter "target=ts"
// @generated from file todoservice/v1/todo.proto (package todoservice.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message todoservice.v1.CreateTODORequest
 */
export class CreateTODORequest extends Message<CreateTODORequest> {
  /**
   * @generated from field: string title = 1;
   */
  title = "";

  constructor(data?: PartialMessage<CreateTODORequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.CreateTODORequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTODORequest {
    return new CreateTODORequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTODORequest {
    return new CreateTODORequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTODORequest {
    return new CreateTODORequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTODORequest | PlainMessage<CreateTODORequest> | undefined, b: CreateTODORequest | PlainMessage<CreateTODORequest> | undefined): boolean {
    return proto3.util.equals(CreateTODORequest, a, b);
  }
}

/**
 * @generated from message todoservice.v1.CreateTODOResponse
 */
export class CreateTODOResponse extends Message<CreateTODOResponse> {
  constructor(data?: PartialMessage<CreateTODOResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.CreateTODOResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTODOResponse {
    return new CreateTODOResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTODOResponse {
    return new CreateTODOResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTODOResponse {
    return new CreateTODOResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTODOResponse | PlainMessage<CreateTODOResponse> | undefined, b: CreateTODOResponse | PlainMessage<CreateTODOResponse> | undefined): boolean {
    return proto3.util.equals(CreateTODOResponse, a, b);
  }
}

/**
 * @generated from message todoservice.v1.ListTODOsRequest
 */
export class ListTODOsRequest extends Message<ListTODOsRequest> {
  constructor(data?: PartialMessage<ListTODOsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.ListTODOsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTODOsRequest {
    return new ListTODOsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTODOsRequest {
    return new ListTODOsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTODOsRequest {
    return new ListTODOsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListTODOsRequest | PlainMessage<ListTODOsRequest> | undefined, b: ListTODOsRequest | PlainMessage<ListTODOsRequest> | undefined): boolean {
    return proto3.util.equals(ListTODOsRequest, a, b);
  }
}

/**
 * @generated from message todoservice.v1.ListTODOsResponse
 */
export class ListTODOsResponse extends Message<ListTODOsResponse> {
  /**
   * @generated from field: repeated todoservice.v1.TODO todos = 1;
   */
  todos: TODO[] = [];

  constructor(data?: PartialMessage<ListTODOsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.ListTODOsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todos", kind: "message", T: TODO, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListTODOsResponse {
    return new ListTODOsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListTODOsResponse {
    return new ListTODOsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListTODOsResponse {
    return new ListTODOsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListTODOsResponse | PlainMessage<ListTODOsResponse> | undefined, b: ListTODOsResponse | PlainMessage<ListTODOsResponse> | undefined): boolean {
    return proto3.util.equals(ListTODOsResponse, a, b);
  }
}

/**
 * @generated from message todoservice.v1.UpdateTODORequest
 */
export class UpdateTODORequest extends Message<UpdateTODORequest> {
  /**
   * @generated from field: todoservice.v1.TODO todo = 1;
   */
  todo?: TODO;

  constructor(data?: PartialMessage<UpdateTODORequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.UpdateTODORequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "todo", kind: "message", T: TODO },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTODORequest {
    return new UpdateTODORequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTODORequest {
    return new UpdateTODORequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTODORequest {
    return new UpdateTODORequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTODORequest | PlainMessage<UpdateTODORequest> | undefined, b: UpdateTODORequest | PlainMessage<UpdateTODORequest> | undefined): boolean {
    return proto3.util.equals(UpdateTODORequest, a, b);
  }
}

/**
 * @generated from message todoservice.v1.UpdateTODOResponse
 */
export class UpdateTODOResponse extends Message<UpdateTODOResponse> {
  constructor(data?: PartialMessage<UpdateTODOResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.UpdateTODOResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateTODOResponse {
    return new UpdateTODOResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateTODOResponse {
    return new UpdateTODOResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateTODOResponse {
    return new UpdateTODOResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateTODOResponse | PlainMessage<UpdateTODOResponse> | undefined, b: UpdateTODOResponse | PlainMessage<UpdateTODOResponse> | undefined): boolean {
    return proto3.util.equals(UpdateTODOResponse, a, b);
  }
}

/**
 * @generated from message todoservice.v1.DeleteTODORequest
 */
export class DeleteTODORequest extends Message<DeleteTODORequest> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  constructor(data?: PartialMessage<DeleteTODORequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.DeleteTODORequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTODORequest {
    return new DeleteTODORequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTODORequest {
    return new DeleteTODORequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTODORequest {
    return new DeleteTODORequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTODORequest | PlainMessage<DeleteTODORequest> | undefined, b: DeleteTODORequest | PlainMessage<DeleteTODORequest> | undefined): boolean {
    return proto3.util.equals(DeleteTODORequest, a, b);
  }
}

/**
 * @generated from message todoservice.v1.DeleteTODOResponse
 */
export class DeleteTODOResponse extends Message<DeleteTODOResponse> {
  constructor(data?: PartialMessage<DeleteTODOResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.DeleteTODOResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteTODOResponse {
    return new DeleteTODOResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteTODOResponse {
    return new DeleteTODOResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteTODOResponse {
    return new DeleteTODOResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteTODOResponse | PlainMessage<DeleteTODOResponse> | undefined, b: DeleteTODOResponse | PlainMessage<DeleteTODOResponse> | undefined): boolean {
    return proto3.util.equals(DeleteTODOResponse, a, b);
  }
}

/**
 * @generated from message todoservice.v1.TODO
 */
export class TODO extends Message<TODO> {
  /**
   * @generated from field: int32 id = 1;
   */
  id = 0;

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  constructor(data?: PartialMessage<TODO>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "todoservice.v1.TODO";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TODO {
    return new TODO().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TODO {
    return new TODO().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TODO {
    return new TODO().fromJsonString(jsonString, options);
  }

  static equals(a: TODO | PlainMessage<TODO> | undefined, b: TODO | PlainMessage<TODO> | undefined): boolean {
    return proto3.util.equals(TODO, a, b);
  }
}

